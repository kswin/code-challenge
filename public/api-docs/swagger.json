{
  "swagger": "2.0",
  "info": {
    "description": "Parse the data dump and make the data accessible in a structured, RESTful manner.",
    "title": "Code Challenge",
    "version": "1.0"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "exercise",
      "description": "Used to create skill-enhancing assessments."
    }
  ],
  "paths": {
    "/exercises": {
      "get": {
        "description": "Returns all exercises in the system.",
        "operationId": "getExercises",
        "produces": ["application/json"],
        "tags": ["exercise"],
        "responses": {
          "200": {
            "description": "A list of exercises.",
            "schema": {
              "type": "array",
              "items":  {
                "$ref": "#/definitions/Exercise"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new exercise.",
        "operationId": "createExercise",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["exercise"],
        "parameters": [
          {
            "name": "exercise",
            "in": "body",
            "description": "An exercise to be added to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Exercise"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created exercise.",
            "schema": {
              "$ref": "#/definitions/Exercise"
            }
          }
        }
      }
    },
    "/exercises/{exerciseId}": {
      "get": {
        "description": "Returns an exercise based on id.",
        "operationId": "getExerciseById",
        "produces": ["application/json"],
        "tags": ["exercise"],
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single exercise.",
            "schema": {
              "$ref": "#/definitions/Exercise"
            }
          }
        }
      },
      "put": {
        "description": "Updates an exercise based on id. POST body only needs to contain the properties that need updating.",
        "operationId": "updateExerciseById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["exercise"],
        "parameters": [
          {
            "name" : "exerciseId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "exercise",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Exercise"
            } 
          }
        ],
        "responses": {
          "200": {
            "description": "Updated exercise.",
            "schema": {
              "$ref": "#/definitions/Exercise"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes an exercise based on id.",
        "operationId": "deleteExerciseById",
        "produces": ["application/json"],
        "tags": ["exercise"],
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted exercise.",
            "schema": {
              "$ref": "#/definitions/Exercise"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Exercise": {
      "id": "Exercise",
      "required": ["question", "answer", "distractors"],
      "properties": {
        "answer": {
          "type": "string"
        },
        "distractors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "question": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "NotFound": {
      "description": "Entity not found"
    }
  }
}